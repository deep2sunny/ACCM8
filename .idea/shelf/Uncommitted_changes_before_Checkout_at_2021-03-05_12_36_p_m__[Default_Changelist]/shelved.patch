Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport re\r\nimport MySQLdb.cursors\r\nfrom flask import Flask, render_template, request, redirect, url_for, session\r\nfrom flask_bootstrap import Bootstrap\r\nfrom flask_mysqldb import MySQL\r\nfrom flask_mail import Mail, Message\r\nfrom passlib.hash import sha256_crypt\r\nimport inputCSV\r\n\r\n#test\r\n\r\napp = Flask(__name__)\r\nBootstrap(app)\r\n\r\n# indicate the folder when loading the input files\r\nCurrentWorkingDirectory = os.getcwd()\r\nUPLOAD_FOLDER = CurrentWorkingDirectory + '/Upload/'\r\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\r\n\r\n# Change this to your secret key (can be anything, it's for extra protection)\r\napp.secret_key = 'your secret key'\r\n\r\n# Enter your database connection details below\r\napp.config['MYSQL_HOST'] = 'localhost'\r\napp.config['MYSQL_USER'] = 'root'\r\napp.config['MYSQL_DB'] = 'accm'\r\n\r\n# configuration file for db password, mailing setting\r\napp.config.from_pyfile('./static/config.cfg')\r\n\r\n# gmail setting to send notification for registration\r\napp.config['MAIL_SERVER'] = \"smtp.googlemail.com\"\r\napp.config['MAIL_PORT'] = 587\r\napp.config['MAIL_USE_TLS'] = 1\r\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\r\n# gmail account to notify a new user's registration (sender, receipient)\r\nemailAccount = '';\r\n\r\n# Intialize MySQL\r\nmysql = MySQL(app)\r\n\r\n# Kelish's changes\r\n\r\n# http://localhost:5000/ - this will be the login page, we need to use both GET and POST requests\r\n@app.route('/', methods=['GET','POST'])\r\ndef login():\r\n    # Output message if something goes wrong...\r\n    msg = ''\r\n    # Check if \"username\" and \"password\" POST requests exist (user submitted form)\r\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\r\n        # Create variables for easy access\r\n        username = request.form['username']\r\n        passwordUser = request.form['password']\r\n        category = request.form['category']\r\n        msg=category\r\n\r\n        # Check if account exists using MySQL\r\n        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)\r\n        result = 0\r\n        if (category == 'professor'):\r\n            result = cursor.execute('SELECT * FROM professor WHERE id = %s',[username])\r\n        elif (category == 'coordinator'):\r\n            result = cursor.execute('SELECT * FROM coordinator WHERE id = %s',[username])\r\n        elif (category == 'secretary'):\r\n            result = cursor.execute('SELECT * FROM secretary WHERE id = %s', [username])\r\n        elif (category == 'student'):\r\n            result = cursor.execute('SELECT student_num as id, pw, sid FROM student WHERE student_num = %s', [username])\r\n\r\n        # hide the upgrade button for professor's or student's session\r\n        bUpload ={0: 'hidden', 1: ''} [(category == 'coordinator')|(category == 'secretary')]\r\n\r\n        if result > 0:\r\n            # Fetch one record and return result\r\n            account = cursor.fetchone()\r\n            password = account['pw']\r\n\r\n            #encrypt the password using SHA256\r\n            if sha256_crypt.verify(passwordUser, password):\r\n                # Create session data, we can access this data in other routes\r\n                session['loggedin'] = True\r\n                session['id'] = account['id']\r\n                session['pw'] = account['pw']\r\n                session['category'] = category\r\n                session['bUpload'] = bUpload\r\n                session['revision'] = 1\r\n                if(category == 'student'):\r\n                    session['sid'] = account['sid']\r\n                \r\n                # Redirect to home page\r\n                return render_template('home.html', bUpload=bUpload)\r\n            else:\r\n                # Account doesnt exist or username/password incorrect\r\n                msg = 'Incorrect username/password'\r\n\r\n        cursor.close()\r\n\r\n    # Show the login form with message (if any)\r\n    return render_template('index.html', msg=msg)\r\n\r\n\r\n# http://localhost:5000/logout - this will be the logout page\r\n@app.route('/logout')\r\ndef logout():\r\n    # Remove session data, this will log the user out\r\n    session.pop('loggedin', None)\r\n    session.pop('id', None)\r\n    session.pop('pw', None)\r\n    session.pop('category', None)\r\n    session.pop('bUpload', None)\r\n    session.pop('revision', None)\r\n    session.pop('sid', None)\r\n    # Redirect to login page\r\n    return redirect(url_for('login'))\r\n\r\n# http://localhost:5000/register - this will be the registration page, we need to use both GET and POST requests\r\n@app.route('/register', methods=['GET','POST'])\r\ndef register():\r\n    print(url_for('register'))\r\n    # Output message if something goes wrong...\r\n    msg = ''\r\n    # Check if \"username\", \"password\" and \"email\" POST requests exist (user submitted form)\r\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form and 'email' in request.form and 'category' in request.form:\r\n        # Create variables for easy access\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n        password = sha256_crypt.hash(password)\r\n        email = request.form['email']\r\n        category = request.form['category']\r\n\r\n        # Check if account exists using MySQL\r\n        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)\r\n        if (category == 'professor'):\r\n            cursor.execute('SELECT * FROM professor WHERE id = \"'+username+'\"')\r\n        elif (category == 'coordinator'):\r\n            cursor.execute('SELECT * FROM coordinator WHERE id = \"'+username+'\"')\r\n        elif (category == 'secretary'):\r\n            cursor.execute('SELECT * FROM secretary WHERE id = \"'+username+'\"')\r\n        elif (category == 'student'):\r\n            cursor.execute('SELECT * FROM student WHERE student_num = \"'+username+'\"')\r\n\r\n        account = cursor.fetchone()\r\n        cursor.close()\r\n\r\n        # If account exists show error and validation checks\r\n        if account:\r\n            msg = 'Account already exists!'\r\n        elif not re.match(r'[^@]+@[^@]+\\.[^@]+', email):\r\n            msg = 'Invalid email address!'\r\n        elif not re.match(r'[A-Za-z0-9]+', username):\r\n            msg = 'Username must contain only characters and numbers!'\r\n        elif not username or not password or not email:\r\n            msg = 'Please fill out the form!'\r\n        else:\r\n            # If the account is appropiate, then send email to account manager to register a new user\r\n            # Enable below to send notification email after setting the emailAccount and gmail account/password in config.cfg\r\n            # mail = Mail(app)\r\n            # msg = Message('New request for the registration of ACCM', sender=emailAccount, recipients=[emailAccount])\r\n            # msg.html=\"<h3>The new resistration is requested as below.</h3>username: \"+username+\"<br>password: \"+password+\"<br>email: \"+email+\"<br>Category: \"+category\r\n            # mail.send(msg)\r\n            msg = ''\r\n            success = \"s\"\r\n            return render_template('register.html', msg=msg, success=success)\r\n    elif request.method == 'POST':\r\n        # Form is empty... (no POST data)\r\n        msg = 'Please fill out the form!'\r\n\r\n    # Show registration form with message (if any)\r\n    return render_template('register.html', msg=msg)\r\n\r\n# http://localhost:5000/home - this will be the home page, only accessible for loggedin users\r\n@app.route('/home')\r\ndef home():\r\n    # Check if user is loggedin\r\n    if 'loggedin' in session:\r\n        # User is loggedin show them the home page\r\n        return render_template('home.html', bUpload=session['bUpload'])\r\n    # User is not loggedin redirect to login page\r\n    return redirect(url_for('login'))\r\n\r\n# http://localhost:5000/profile - this will be the profile page, only accessible for loggedin users\r\n@app.route('/profile', methods=['POST','GET'])\r\ndef profile():\r\n    # Check if user is loggedin\r\n    if 'loggedin' in session:\r\n\r\n        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)\r\n        category = session['category']\r\n        if (category == 'professor'):\r\n            cursor.execute('select distinct id, fname, lname, email, pw, name from professor inner join teach using(profid) inner join coursemap using(mapid) inner join program using(pid) where id=%s and pw=%s', ([session['id']], [session['pw']]))\r\n        elif (category == 'coordinator'):\r\n            cursor.execute('SELECT * FROM coordinator inner join program using(pid) WHERE id = %s AND pw = %s', ([session['id']], [session['pw']]))\r\n        elif (category == 'secretary'):\r\n            cursor.execute('select id, fname, lname, pw, email, name from secretary inner join program_secretary using (secid) inner join program using(pid) where id=%s and pw=%s',([session['id']], [session['pw']]))\r\n        elif (category == 'student'):\r\n            cursor.execute('select student_num as id, fname, lname, pw, email, name from student inner join enrollment using (sid) inner join  program using (pid) where student_num=%s and pw=%s', ([session['id']], [session['pw']]))\r\n\r\n        account = cursor.fetchone()\r\n\r\n        if request.method == 'POST' and 'password' in request.form:\r\n\r\n            #if password is right, show the profile info\r\n            if(sha256_crypt.verify(request.form['password'], session['pw'])):\r\n                return render_template('profile.html', account=account, category=session['category'], msg=\"s\")\r\n            else:\r\n                return render_template('profile.html', account=account, category=session['category'], msg=\"The password is wrong.\")\r\n\r\n        # if user requests to change password\r\n        elif request.method == 'POST' and 'newPassword' in request.form and 'newPassword2' in request.form:\r\n            if(request.form['newPassword'] == request.form['newPassword2']):\r\n                try:\r\n                    category = session['category']\r\n\r\n                    #make hash using new password user inputs\r\n                    pw = sha256_crypt.hash(request.form['newPassword'])\r\n\r\n                    #update password\r\n                    if (category == 'professor'):\r\n                        cursor.execute('update professor set pw = %s WHERE id = %s',\r\n                                       (pw, [session['id']]))\r\n                    elif (category == 'coordinator'):\r\n                        cursor.execute(' update coordinator set pw = %s where id= %s',\r\n                                       (pw, [session['id']]))\r\n                    elif (category == 'secretary'):\r\n                        cursor.execute('update secretary set pw = %s WHERE id = %s',\r\n                                       (pw, [session['id']]))\r\n                    elif (category == 'student'):\r\n                        cursor.execute('update student set pw = %s WHERE student_num = %s',\r\n                                       (pw, [session['id']]))\r\n                    mysql.connection.commit()\r\n                    cursor.close()\r\n                    #save new hash to session\r\n                    session['pw'] = pw\r\n                    return render_template('profile.html', account=account, category=session['category'], msg=\"New password is updated.\")\r\n                except (MySQLdb.Error, MySQLdb.Warning) as e:\r\n                    print(e)\r\n                    cursor.close()\r\n                    return render_template('profile.html', account=account, category=session['category'], msg=\"New password is not changed.\")\r\n            else:\r\n                cursor.close()\r\n                return render_template('profile.html', account=account, category=session['category'],\r\n                                       msg=\"New password is not changed.\")\r\n        cursor.close()\r\n        return render_template('profile.html', account=account, category=session['category'])\r\n    # User is not loggedin redirect to login page\r\n    return redirect(url_for('login'))\r\n\r\n# http://localhost:5000/uploadGrade\r\n@app.route('/uploadGrade')\r\ndef uploadGrade():\r\n    print(\"call uploadGrade\")\r\n    return render_template('uploadGrade.html', show=0)\r\n\r\n# http://localhost:5000/uploadGrade2DB\r\n@app.route('/uploadGrade2DB', methods=['POST'])\r\ndef uploadGrade2DB():\r\n    # print(\"call uploadGrade2DB\")\r\n    if request.method == 'POST' and 'pVersion' in request.form and 'cTerm' in request.form:\r\n        # print(\"call inputCSV2DB\")\r\n        file = request.files['inputFile']\r\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\r\n\r\n        #call inputCSV2DB with file name\r\n        inputCSV.inputCSV2DB(request.form['pVersion'], request.form['cTerm'], \"\", file.filename)\r\n\r\n    if 'loggedin' in session:\r\n        # User is loggedin show them the uploadGrade page\r\n        # print(\"call uploadGrade below\")\r\n        return render_template('uploadGrade.html', show=1, fileName=file.filename)\r\n\r\n    # User is not loggedin redirect to login page\r\n    return redirect(url_for('login'))\r\n\r\n# http://localhost:5000/viewGrade\r\n@app.route('/viewGrade', methods=['GET','POST'])\r\ndef viewGrade():\r\n    if(session['category'] == 'student'):\r\n        #if user logged in as student, then show the grade flowchart of the student\r\n        return viewFlowchart(str(session['sid']), '','','','')\r\n\r\n    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)\r\n    # get the program version\r\n    cursor.execute('select distinct program_version  from program;')\r\n    versionDict = cursor.fetchall()\r\n    # get the program list\r\n    cursor.execute('SELECT program_version, pid, name FROM program ')\r\n    programDict = cursor.fetchall()\r\n    # get the levels\r\n    cursor.execute('select distinct level, pid from coursemap order by level')\r\n    lvlDict = cursor.fetchall()\r\n    # get the course list\r\n    cursor.execute('select pid, coursemap.cid, title, level from coursemap inner join course using(cid) order by title;')\r\n    courseDict = cursor.fetchall()\r\n\r\n    if request.method == 'POST' and 'program' in request.form and 'level' in request.form and 'version' in request.form:\r\n        # update the grade or comments for a student\r\n        if 'gid' in request.form and request.form['gid']:\r\n            # print(request.form['m_grade'])\r\n            # print(request.form['gid'])\r\n            setQuery =''\r\n            if 'm_grade' in request.form and request.form['gid']:\r\n                setQuery = \"letter_grade = '\" + request.form['m_grade']+\"', fcomment = '\" + request.form['m_fcomment']+\"', rcomment = '\" + request.form['m_rcomment']+\"'\"\r\n\r\n            query = \"UPDATE grade SET \"+setQuery+\" WHERE gid='\"+ request.form['gid']+\"'\"\r\n            cursor.execute(query)\r\n            mysql.connection.commit()\r\n        #insert new item for student information\r\n        elif 'gid' in request.form and request.form['m_grade']:\r\n            valuesQuery= \"values('\" + request.form['sid']+\"', '\" + request.form['mapid']+\"', '\" + request.form['m_grade']+\"', '\" + request.form['m_fcomment']+\"', '\" + request.form['m_rcomment']+\"')\"\r\n            query = \"INSERT INTO grade(sid, mapid, letter_grade, fcomment, rcomment) \" + valuesQuery\r\n            cursor.execute(query)\r\n            mysql.connection.commit()\r\n\r\n        #delete grade\r\n        if 'delete_gid' in request.form and request.form['delete_gid']:\r\n            query = \"delete from grade where gid ='\"+request.form['delete_gid']+\"'\"\r\n            cursor.execute(query)\r\n            mysql.connection.commit()\r\n\r\n        #show the grade book for the specific program version, program, level or course\r\n        if 'course' in request.form and request.form['course'] and request.form['course'] != 'null':\r\n            query = \"select c.course_num, c.title, coursemap.level, coursemap.mapid from grade as g inner join student as s using(sid) inner join coursemap using(mapid) inner join program as p using(pid) inner join course as c using(cid) where p.pid = \"+request.form['program'] +\" and p.program_version='\"+request.form['version'] +\"' and coursemap.level='\"+request.form['level'] +\"' and c.cid='\"+request.form['course'] +\"' group by c.course_num order by course_num\"\r\n        else:\r\n            query = \"select c.course_num, c.title, coursemap.level, coursemap.mapid from grade as g inner join student as s using(sid) inner join coursemap using(mapid) inner join program as p using(pid) inner join course as c using(cid) where p.pid = \"+request.form['program'] +\" and p.program_version='\"+request.form['version'] +\"' and coursemap.level='\"+request.form['level'] +\"' group by c.course_num order by course_num\"\r\n\r\n        cursor.execute(query)\r\n        #get the course list as program, version and level\r\n        clist = cursor.fetchall()\r\n\r\n        mandatoryCourses = ['CST8260', 'CST8209', 'CST8279', 'MAD9013', 'MAT8001C', 'CST8300', 'CST8250', 'CST8253',\r\n                            'CST8254', 'MAD9010', 'ENL1813T', 'CST8256', 'CST8257', 'CST8258', 'ENL8720', 'CST8259',\r\n                            'CST8265', 'CST8325', 'CST8268']\r\n        for c1 in clist:\r\n            if(c1['course_num'] in mandatoryCourses):\r\n                print(c1)\r\n                c1['mandatory']= 1\r\n            else:\r\n                c1['mandatory']= 0\r\n\r\n\r\n        #get all the grade for every students with program, version and level\r\n        #query =\"select p.name, p.program_version, gid, student_num, sid, concat(s.fname, ' ' , s.lname) as fullname, s.level, fcomment,rcomment,  c.course_num, c.title, letter_grade, coursemap.level, p.pid, c.cid from grade as g inner join student as s using(sid) inner join coursemap using(mapid) inner join program as p using(pid) inner join course as c using(cid) where p.pid = \"+request.form['program'] +\" and p.program_version='\"+request.form['version'] +\"' and coursemap.level='\"+request.form['level'] +\"' order by s.student_num, title\"\r\n        query = \"select p.name, p.program_version, gid, student_num, sid, concat(s.fname, ' ' , s.lname) as fullname, s.level, fcomment,rcomment,  c.course_num, c.title, letter_grade, coursemap.level, p.pid, c.cid from grade as g inner join student as s using(sid) inner join coursemap using(mapid) inner join program as p using(pid) inner join course as c using(cid) where p.pid = \" + \\\r\n                request.form['program'] + \" and p.program_version='\" + request.form[\r\n                    'version'] + \"' and coursemap.level='\" + request.form['level'] + \"' order by s.lname, s.fname, s.student_num\"\r\n        cursor.execute(query)\r\n        result = cursor.fetchall()\r\n        cursor.close()\r\n        s = ''\r\n        rDict=()\r\n        d={}\r\n        #save grade info for each student to dictionary\r\n        for r in result:\r\n            if (s != r['student_num']):\r\n                if (d):\r\n                    rDict += (d,)\r\n\r\n                d = {}\r\n                s = r['student_num']\r\n                d['student_num'] = s\r\n                d['sid'] = r['sid']\r\n                d['fullname'] = r['fullname']\r\n                d['level'] = r['level']\r\n\r\n            d[r['course_num']] = (r['letter_grade'])\r\n            d[r['course_num']+ \"_id\"] = (r['gid'])\r\n\r\n            comment = ''\r\n            if (r['fcomment']):\r\n                comment = \"fcomment: \" + r['fcomment']\r\n\r\n            if (r['rcomment']):\r\n                comment += \" rcomment: \" + r['rcomment']\r\n\r\n            if (comment):\r\n                d[r['course_num'] + \"_c\"] = comment\r\n        if (d):\r\n            rDict += (d,)\r\n\r\n        if (session['category'] != 'coordinator' and session['category'] != 'secretary' ):\r\n            edit='disabled'\r\n        else:\r\n            edit = ''\r\n\r\n        #call viewGrade.html with result\r\n        if(len(rDict)):\r\n            return render_template('viewGrade.html', vDict=versionDict, pDict=programDict, lvlDict=lvlDict, cDict=courseDict,\r\n                                   values=request.form, rDict=rDict, clist=clist, edit=edit)\r\n        else:\r\n            return render_template('viewGrade.html', vDict=versionDict, pDict=programDict, lvlDict=lvlDict, cDict=courseDict,\r\n                                   values=request.form, noData=True)\r\n    #show the viewGrade for GET method\r\n    return render_template('viewGrade.html', vDict=versionDict, pDict=programDict, lvlDict=lvlDict, cDict=courseDict, values=request.form)\r\n\r\n\r\n# http://localhost:5000/viewFlowchart\r\n\r\n@app.route('/viewFlowchart/<string:sid>/<string:sVersion>/<string:sProgram>/<string:sLevel>/<string:sCourse>', methods=['GET','POST'])\r\ndef viewFlowchart(sid, sVersion, sProgram, sLevel, sCourse):\r\n    print(\"call viewFlowchart\", sid, sVersion, sProgram, sLevel, sCourse)\r\n    # print(\"call viewFlowchart\", session['category'])\r\n\r\n    #this is to refresh flowchart.js\r\n    revision = session['revision']\r\n\r\n    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)\r\n\r\n    # retrieve grade input and update student's grade for that course\r\n    if request.method == 'POST':\r\n        #get grade input\r\n        new_grade = request.form['inputGradeFlowchart']\r\n        #get updated faculty comment\r\n        new_fcomment = request.form['editcourseFcomment']\r\n        #get updated review comment\r\n        new_rcomment = request.form['editcourseRcomment']\r\n        # get hidden grade id\r\n        grade_id = request.values.get('gradeID')\r\n        # get hidden mapid\r\n        get_mapid = request.values.get('mapid')\r\n        print(\"call viewFlowchart\", new_grade)\r\n        print(\"call viewFlowchart\", grade_id)\r\n        print(\"call viewFlowchart\", get_mapid)\r\n        print(\"call viewFlowchart\", new_fcomment)\r\n        print(\"call viewFlowchart\", new_rcomment)\r\n\r\n        cursor.execute(\"update grade \" +\r\n                       \"SET letter_grade= '\" + new_grade + \"', fcomment = '\" + new_fcomment + \"', rcomment = '\" + new_rcomment + \"' \" +\r\n                       \"where gid=\" + grade_id)\r\n        mysql.connection.commit()\r\n\r\n\r\n    # get flowchart basic layout\r\n    cursor.execute(\"SELECT flowchart.sequence, coursemap.mapid, course.course_num, course.title \" +\r\n                   \"FROM flowchart \" +\r\n                   \"INNER JOIN coursemap USING(mapid) \" +\r\n                   \"INNER JOIN course USING(cid) \" +\r\n                   \"ORDER BY flowchart.sequence ASC\")\r\n    flowchart = cursor.fetchall()\r\n\r\n    # flowchart layout list\r\n    flowchart_courses_temp = []\r\n    flowchart_courses = []\r\n\r\n    mainc = []\r\n    prev = 0;\r\n    for c in flowchart:\r\n        if(prev != c['sequence']):\r\n            flowchart_courses.append(\r\n                {'id': c['sequence'], 'mapid': c['mapid'], 'ccode': c['course_num'], 'title': c['title']})\r\n            mainc.append(c['course_num'])\r\n            prev = c['sequence']\r\n\r\n\r\n    # mainc = []\r\n    # i = 1\r\n    # for c in flowchart:\r\n    #     flowchart_courses.append(\r\n    #             {'id': c['sequence'], 'mapid': c['mapid'], 'ccode': c['course_num'], 'title': c['title']})\r\n    #     mainc.append(c['course_num'])\r\n\r\n\r\n    # get courses that have a prerequisite\r\n    pre_courses = []\r\n    for course in flowchart_courses:\r\n        # pre_course.append(course['course_num'])\r\n        cursor.execute(\r\n            \"SELECT distinct flowchart.sequence, course.course_num, course.title, prerequisite.mapid, prerequisite.prerequisite \" +\r\n            \"FROM prerequisite \" +\r\n            \"INNER JOIN coursemap USING (mapid) \" +\r\n            \"INNER JOIN course USING (cid) \" +\r\n            \"INNER JOIN flowchart USING (mapid) \" +\r\n            \"WHERE course.course_num = '\" + course['ccode'] + \"' \" +\r\n            \"ORDER BY flowchart.sequence ASC;\")\r\n\r\n        prereq_results = cursor.fetchall()\r\n\r\n        # pre_course.append(prereqs)\r\n        for c in prereq_results:\r\n            pre_courses.append(\r\n                {'sequence': c['sequence'], 'ccode': c['course_num'], 'title': c['title'], 'c_mapid': c['mapid'],\r\n                 'c_prereq': c['prerequisite']})\r\n\r\n\r\n    # get courses that are prerequisites\r\n    items_c = []\r\n    for d in pre_courses:\r\n        cursor.execute(\r\n            \"SELECT distinct flowchart.sequence, course.course_num, course.title, coursemap.mapid as 'prereq_id' \" +\r\n            \"FROM course \" +\r\n            \"INNER JOIN coursemap USING (cid) \" +\r\n            \"INNER JOIN flowchart USING (mapid) \" +\r\n            \"where coursemap.mapid = \" + str(d['c_prereq']) + \" \" +\r\n            \"ORDER BY flowchart.sequence ASC;\")\r\n        pre_c = cursor.fetchall()\r\n        for c in pre_c:\r\n            items_c.append({'sequence': c['sequence'], 'ccode': c['course_num'], 'title': c['title'],\r\n                            'pre_id': c['prereq_id']})\r\n\r\n    # links between prerequisite courses: sources and targets\r\n    links = []\r\n    for i in range(len(pre_courses)):\r\n        if pre_courses[i]['c_prereq'] == items_c[i]['pre_id']:\r\n            links.append({'source_id': items_c[i]['sequence'], 'source': items_c[i]['ccode'],\r\n                          'target_id': pre_courses[i]['sequence'], 'target': pre_courses[i]['ccode']})\r\n    # remove duplicates\r\n    seen = set()\r\n\r\n    #final prereq list\r\n    prereq_links = []\r\n    for duplicates in links:\r\n        t = tuple(duplicates.items())\r\n        if t not in seen:\r\n            seen.add(t)\r\n            prereq_links.append(duplicates)\r\n\r\n    # get student courses\r\n    cursor.execute(\r\n            \"select distinct flowchart.sequence, concat(professor.fname, ' ' , professor.lname) as 'Professor Name', course.course_num, course.title, \" +\r\n            \"term, concat(student.fname, ' ', student.lname) as 'Student Name', student.student_num, letter_grade, coursemap.mapid, gid, \" +\r\n            \"fcomment, rcomment \" +\r\n            \"from grade \" +\r\n            \"inner join coursemap using(mapid) inner join course using (cid) inner join teach using(mapid) \" +\r\n            \"inner join professor using(profid) inner join student using (sid) \" +\r\n            \"left join flowchart on flowchart.mapid = coursemap.mapid \"\r\n            \"where sid=\" + sid + \" \" +\r\n            \"GROUP BY course.course_num \" +\r\n            \"order by flowchart.sequence ASC\")\r\n    results = cursor.fetchall()\r\n\r\n    student_name = ''\r\n    student_num = ''\r\n\r\n    # student results\r\n    student_grades = []\r\n    for r in results:\r\n        student_name = r['Student Name']\r\n        student_num = r['student_num']\r\n        student_grades.append({'id': r['sequence'], 'student_name': r['Student Name'], 'student_num': r['student_num'],\r\n                              'ccode': r['course_num'], 'coursename': r['title'], 'term': r['term'], 'prof': r['Professor Name'],\r\n                               'grade': r['letter_grade'], 'mapid': r['mapid'], 'gid': r['gid'], 'fcomment': r['fcomment'], 'rcomment': r['rcomment']})\r\n\r\n\r\n    revision += 1\r\n    # session['revision'] = revision\r\n\r\n    r = revision\r\n    bBackKey = not (session['category'] == 'student')\r\n    bEditGrade = (session['category'] == 'coordinator' or session['category'] == 'secretary')\r\n    admin_session = bEditGrade\r\n\r\n\r\n\r\n    query = \"select distinct sid from grade as g inner join student as s using(sid) inner join coursemap using(mapid) inner join program as p using(pid) inner join course as c using(cid) where p.pid = \" + \\\r\n            sProgram + \" and p.program_version='\" + sVersion + \"' and coursemap.level='\" + sLevel + \"' order by s.lname, s.fname, s.student_num\"\r\n    cursor.execute(query)\r\n    resultSIDList = cursor.fetchall()\r\n    cursor.close()\r\n\r\n    found = 0\r\n    idx = resultSIDList.index({'sid': int(sid)})\r\n    prevSID = resultSIDList[idx-1]\r\n\r\n    length = len(resultSIDList)\r\n    if(idx == len(resultSIDList)-1):\r\n        nextSID = resultSIDList[0]\r\n    else:\r\n        idx = idx +1\r\n        nextSID = resultSIDList[idx]\r\n\r\n    v = {'version': sVersion, 'program': sProgram, 'level':sLevel, 'course': sCourse, 'nextSID': str(nextSID['sid']), 'prevSID':str(prevSID['sid'])}\r\n\r\n    #id: sequence, ccode: course number\r\n    iawd_course_map = [{'id': 1, 'ccode': 'CST8260'},{'id': 2, 'ccode': 'CST8209'},{'id': 3, 'ccode': 'CST8279'},\r\n                       {'id': 4, 'ccode': 'MAD9013'},{'id': 5, 'ccode': 'MAT8001C'},{'id': 6, 'ccode': 'CST8300'},\r\n                       {'id': 7, 'ccode': 'CST8250'},{'id': 8, 'ccode': 'CST8253'},{'id': 9, 'ccode': 'CST8254'},\r\n                       {'id': 10, 'ccode': 'MAD9010'},{'id': 11, 'ccode': 'ENL1813T'},{'id': 13, 'ccode': 'CST8256'},\r\n                       {'id': 14, 'ccode': 'CST8257'},{'id': 15, 'ccode': 'CST8258'},{'id': 16, 'ccode': 'ENL8720'},\r\n                       {'id': 18, 'ccode': 'CST8259'},{'id': 19, 'ccode': 'CST8265'},{'id': 20, 'ccode': 'CST8267'},\r\n                       {'id': 21, 'ccode': 'CST8268'}]\r\n    prereq_links = [{'source_id': 1, 'source': 'CST8260', 'target_id': 7, 'target': 'CST8250'},\r\n                        {'source_id': 2, 'source': 'CST8209', 'target_id': 8, 'target': 'CST8253'},\r\n                        {'source_id': 3, 'source': 'CST8279', 'target_id': 8, 'target': 'CST8253'},\r\n                        {'source_id': 8, 'source': 'CST8253', 'target_id': 13, 'target': 'CST8256'},\r\n                        {'source_id': 1, 'source': 'CST8260', 'target_id': 13, 'target': 'CST8256'},\r\n                        {'source_id': 1, 'source': 'CST8260', 'target_id': 14, 'target': 'CST8257'},\r\n                        {'source_id': 2, 'source': 'CST8209', 'target_id': 14, 'target': 'CST8257'},\r\n                        {'source_id': 8, 'source': 'CST8253', 'target_id': 15, 'target': 'CST8258'},\r\n                        {'source_id': 11, 'source': 'ENL1813T', 'target_id': 16, 'target': 'ENL8720'},\r\n                        {'source_id': 14, 'source': 'CST8257', 'target_id': 18, 'target': 'CST8259'},\r\n                        {'source_id': 14, 'source': 'CST8257', 'target_id': 19, 'target': 'CST8265'},\r\n                        {'source_id': 14, 'source': 'CST8257', 'target_id': 20, 'target': 'CST8267'},\r\n                        {'source_id': 15, 'source': 'CST8258', 'target_id': 21, 'target': 'CST8268'}]\r\n\r\n    return render_template('viewFlowchart.html', flowchart_courses=iawd_course_map, prerequisite_links=prereq_links, sid = sid,\r\n                           student_results = student_grades, studentName = student_name, studentNum = student_num, values=request.form,\r\n                           bBackKey=bBackKey, random=r, admin_session = admin_session, v=v, bEditGrade=bEditGrade)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app.py	(revision bcb2ee09b68b86bf6233b1e0ec553f0322be0339)
+++ app.py	(date 1614965610064)
@@ -9,6 +9,7 @@
 import inputCSV
 
 #test
+#akash
 
 app = Flask(__name__)
 Bootstrap(app)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision bcb2ee09b68b86bf6233b1e0ec553f0322be0339)
+++ .idea/misc.xml	(date 1614965111184)
@@ -3,7 +3,7 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
Index: .idea/ACCM7.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"Flask\">\r\n    <option name=\"enabled\" value=\"true\" />\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/ACCM7.iml	(revision bcb2ee09b68b86bf6233b1e0ec553f0322be0339)
+++ .idea/ACCM7.iml	(date 1614965111172)
@@ -5,7 +5,7 @@
   </component>
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.9" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TemplatesService">
